name: Deploy
on:
  push:
    branches:
      - master
      - test
      - dev
jobs:
  setup-env:
    uses: "./.github/workflows/set-base-env.yml"
  package-lambdas:
    name: Package lambdas
    runs-on: ubuntu-latest
    steps:
      - run: bash ${GITHUB_WORKSPACE}/scripts/package-lambdas.sh
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    needs: ["setup-env", "package-lambdas"]
    if: (contains(fromJson('["dev", "test", "prod"]'), needs.setup-env.outputs.env_name))
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_TOKEN }}
      - run: pwd
      - name: Terraform format
        id: tf-format
        run: terraform fmt -check -diff
      - name: Terraform Init
        id: tf-init
        run: terraform init
      - name: Terraform validate
        id: tf-validate
        run: terraform validate
      - name: Terraform Plan
        id: tf-plan
        run: terraform plan
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const script = require("${{github.action_path}}/index.js")
            await script.run({github, context})
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
  
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
  
            </details>
  
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
  
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        shell: bash
      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push'
        run: terraform apply -auto-approve -var-file=${{needs.setup-env.outputs.env_name))}}.tfvars
        working-directory: ${{inputs.working-directory}}/terraform
        shell: bash
        # env:
        #   TF_WORKSPACE: ${{ steps.set_workspace.outputs.environment }}    
